# type: ignore
# 避免紅線出現(ALLOWED_HOSTS: List[str] = ["*"])
"""
Django settings for myapps project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# 載入 .env 檔案 - 指定完整路徑
load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', '0') == '1'

# 所有連線
ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '*').split(',')



# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "myapps.Authorization",  # 加入使用者models
    "myapps.Ecpay",  # 加入綠界金流models
    "myapps.Topic",  # 加入題目models
    "rest_framework",  # 加入 Django REST framework
    "rest_framework.authtoken",  # 加入 JWT 認證
    "corsheaders",  # 加入 CORS 支援
    'drf_yasg',
]

AUTH_USER_MODEL = "Authorization.User"  # 使用自定義的使用者模型


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # CORS 中介軟體，必須放在最前面
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "myapps.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "myapps.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 開發環境使用 SQLite（暫時）
DATABASES = {
    "default": {
        "ENGINE": os.getenv('DB_ENGINE', 'django.db.backends.sqlite3'),
        "NAME": os.getenv('DB_NAME', BASE_DIR / "db.sqlite3"),
        "USER": os.getenv('DB_USER', ''),
        "PASSWORD": os.getenv('DB_PASSWORD', ''),
        "HOST": os.getenv('DB_HOST', ''),
        "PORT": os.getenv('DB_PORT', ''),
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# 為了提升登入性能，簡化密碼驗證器
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 6,  # 最小長度為6位
        }
    },
]

# 為了提升登入性能，使用更快的密碼加密算法（僅用於開發環境）
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.MD5PasswordHasher',  # 快速但不太安全，僅用於開發
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',  # 預設的安全算法
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "zh-hant"

# LANGUAGES = [
#     ('en', _('English')),
#     ('zh-hant', _('Traditional Chinese')),
# ]

TIME_ZONE = "Asia/Taipei"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS":[
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    "DEFAULT_AUTHENTICATION_CLASSES":[
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ],
    "DEFAULT_PERMISSION_CLASSES":[
        'rest_framework.permissions.AllowAny'  # 改為 AllowAny，讓各個視圖自己決定權限
    ]
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),  # 設定存取令牌的有效期為1天
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # 設定刷新令牌的有效期為7天
}

# CORS 設置 - 允許跨域請求
CORS_ALLOW_ALL_ORIGINS = True  # 開發環境使用，生產環境應該設定特定的 origins
CORS_ALLOW_CREDENTIALS = True

# CSRF 設置 - 對 API 端點豁免 CSRF 檢查

CORS_ALLOWED_ORIGINS = os.getenv("NEXT_PUBLIC_ORIGIN", "").split(",")
CSRF_TRUSTED_ORIGINS = os.getenv("NEXT_PUBLIC_ORIGIN", "").split(",")

# 對 API 路徑豁免 CSRF
CSRF_EXEMPT_URLS = [
    r'^/api/',
    r'^/login',
    r'^/register',
]

# 郵件發送設定：Gmail SMTP
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 如果需要在開發環境中使用控制台輸出郵件，則可以使用以下行
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') 
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER