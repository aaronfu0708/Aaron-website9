# type: ignore
# 避免紅線出現(ALLOWED_HOSTS: List[str] = ["*"])
"""
Django settings for myapps project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# 載入 .env 檔案 - 指定完整路徑
load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY') or 'django-insecure-fallback-key-for-production'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', '0') == '1'

# 所有連線 - 生產環境應該明確指定域名
ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'aaron-website9-backend.onrender.com,aaron-website9.vercel.app,localhost,127.0.0.1').split(',')

# 確保生產環境域名始終被包含
PRODUCTION_HOSTS = [
    'aaron-website9-backend.onrender.com',  # 後端域名
    'aaron-website9.vercel.app',  # 前端域名
    'aaron-website9-a92ja5jgp-aaronfu0708s-projects.vercel.app',
    'aaron-website9-hy1cs9xgf-aaronfu0708s-projects.vercel.app',
    'aaron-website9-ol779g7a6-aaronfu0708s-projects.vercel.app'
]

for host in PRODUCTION_HOSTS:
    if host not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(host)



# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "myapps.Authorization",  # 加入使用者models
    "myapps.Ecpay",  # 加入綠界金流models
    "myapps.Topic",  # 加入題目models
    "rest_framework",  # 加入 Django REST framework
    "rest_framework.authtoken",  # 加入 JWT 認證
    "corsheaders",  # 加入 CORS 支援
    'drf_yasg',
]

AUTH_USER_MODEL = "Authorization.User"  # 使用自定義的使用者模型


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # CORS 中介軟體，必須放在最前面
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

]

ROOT_URLCONF = "myapps.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "myapps.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 資料庫設定 - 支援 MySQL 和 SQLite
DATABASES = {
    "default": {
        "ENGINE": os.getenv('DB_ENGINE', 'django.db.backends.sqlite3'),
        "NAME": os.getenv('DB_NAME', BASE_DIR / "db.sqlite3"),
        "USER": os.getenv('DB_USER', ''),
        "PASSWORD": os.getenv('DB_PASSWORD', ''),
        "HOST": os.getenv('DB_HOST', ''),
        "PORT": os.getenv('DB_PORT', ''),
        "OPTIONS": {
            "charset": "utf8mb4",
            # 資料庫查詢優化設定
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",  # 嚴格模式
            "autocommit": True,  # 自動提交
            # MySQL 性能優化設定
            "sql_mode": "STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO",
            "charset": "utf8mb4",
            "use_unicode": True,
            "connect_timeout": 10,
            "read_timeout": 30,
            "write_timeout": 30,
        } if os.getenv('DB_ENGINE') == 'django.db.backends.mysql' else {},
        # 資料庫連接池設定
        "CONN_MAX_AGE": 600 if os.getenv('DB_ENGINE') == 'django.db.backends.mysql' else 60,  # 連接最大存活時間（秒）
        "CONN_HEALTH_CHECKS": True,  # 啟用連接健康檢查
        "OPTIONS": {
            **({"charset": "utf8mb4"} if os.getenv('DB_ENGINE') == 'django.db.backends.mysql' else {}),
            **({"timeout": 20} if os.getenv('DB_ENGINE') == 'django.db.backends.sqlite3' else {}),
        }
    }
}

# 資料庫查詢優化設定
if DEBUG:
    # 開發環境：啟用查詢日誌
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            'django.db.backends': {
                'handlers': ['console'],
                'level': 'DEBUG',  # 啟用SQL查詢日誌
                'propagate': False,
            },
        },
    }
else:
    # 生產環境：優化查詢效能
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'WARNING',  # 生產環境只記錄警告和錯誤
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'WARNING',
                'propagate': False,
            },
        },
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# 為了提升登入性能，簡化密碼驗證器
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 6,  # 最小長度為6位
        }
    },
]

# 為了提升登入性能，使用更快的密碼加密算法（僅用於開發環境）
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.MD5PasswordHasher',  # 快速但不太安全，僅用於開發
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',  # 預設的安全算法
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "zh-hant"

# LANGUAGES = [
#     ('en', _('English')),
#     ('zh-hant', _('Traditional Chinese')),
# ]

TIME_ZONE = "Asia/Taipei"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS":[
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    "DEFAULT_AUTHENTICATION_CLASSES":[
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ],
    "DEFAULT_PERMISSION_CLASSES":[
        'rest_framework.permissions.AllowAny'  # 改為 AllowAny，讓各個視圖自己決定權限
    ]
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),  # 設定存取令牌的有效期為1天
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # 設定刷新令牌的有效期為7天
}

# CORS 設置 - 允許跨域請求
# 根據環境變數設定允許的來源
CORS_ALLOWED_ORIGINS = os.getenv("NEXT_PUBLIC_ORIGIN", "https://aaron-website9.vercel.app,https://aaron-website9-a92ja5jgp-aaronfu0708s-projects.vercel.app,https://aaron-website9-hy1cs9xgf-aaronfu0708s-projects.vercel.app,https://aaron-website9-ol779g7a6-aaronfu0708s-projects.vercel.app,http://localhost:3000,http://127.0.0.1:3000").split(",")

# 確保生產環境前端域名始終被包含
PRODUCTION_FRONTEND_DOMAINS = [
    'https://aaron-website9.vercel.app',  # 主要固定域名
    'https://aaron-website9-a92ja5jgp-aaronfu0708s-projects.vercel.app',
    'https://aaron-website9-hy1cs9xgf-aaronfu0708s-projects.vercel.app',
    'https://aaron-website9-ol779g7a6-aaronfu0708s-projects.vercel.app'
]

for domain in PRODUCTION_FRONTEND_DOMAINS:
    if domain not in CORS_ALLOWED_ORIGINS:
        CORS_ALLOWED_ORIGINS.append(domain)

CORS_ALLOW_CREDENTIALS = True

# 如果沒有設定環境變數，則允許所有來源（僅用於開發）
if not os.getenv("NEXT_PUBLIC_ORIGIN"):
    CORS_ALLOW_ALL_ORIGINS = True  # 開發環境允許所有來源，提升性能

# 允許所有Vercel預覽域名
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"https://aaron-website9-[a-zA-Z0-9]+-aaronfu0708s-projects\.vercel\.app",
    r"https://aaron-website9\.vercel\.app",
]

# 確保CORS設置正確
if os.getenv("NEXT_PUBLIC_ORIGIN"):
    # 生產環境：使用特定的允許來源
    CORS_ALLOW_ALL_ORIGINS = False
else:
    # 開發環境：允許所有來源
    CORS_ALLOW_ALL_ORIGINS = True

# 新增：允許的HTTP方法
CORS_ALLOWED_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# 新增：允許的HTTP頭部
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# 新增：暴露的HTTP頭部
CORS_EXPOSE_HEADERS = [
    'content-type',
    'content-disposition',
]

# 新增：預檢請求的緩存時間（秒）
CORS_PREFLIGHT_MAX_AGE = 86400  # 24小時

# 新增：是否允許攜帶憑證（cookies, authorization headers等）
CORS_ALLOW_CREDENTIALS = True

# 新增：是否在響應中包含CORS頭部
CORS_REPLACE_HTTPS_REFERER = False

# 移除衝突的全局允許設置，讓django-cors-headers正常工作
# CORS_ALLOW_ALL_ORIGINS = True  # 註釋掉，避免覆蓋其他設置
# CORS_ALLOW_ALL_HEADERS = True  # 註釋掉，避免覆蓋其他設置  
# CORS_ALLOW_ALL_METHODS = True  # 註釋掉，避免覆蓋其他設置

# CSRF 設置 - 對 API 端點豁免 CSRF 檢查
CSRF_TRUSTED_ORIGINS = os.getenv("NEXT_PUBLIC_ORIGIN", "https://aaron-website9.vercel.app,https://aaron-website9-a92ja5jgp-aaronfu0708s-projects.vercel.app,https://aaron-website9-hy1cs9xgf-aaronfu0708s-projects.vercel.app,https://aaron-website9-ol779g7a6-aaronfu0708s-projects.vercel.app,http://localhost:3000,http://127.0.0.1:3000").split(",")

# 確保生產環境前端域名始終被包含在 CSRF 信任列表中
for domain in PRODUCTION_FRONTEND_DOMAINS:
    if domain not in CSRF_TRUSTED_ORIGINS:
        CSRF_TRUSTED_ORIGINS.append(domain)

# 對 API 路徑豁免 CSRF
CSRF_EXEMPT_URLS = [
    r'^/api/',
    r'^/login',
    r'^/register',
]

# 日誌設定
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'INFO',
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#     },
# }

# 郵件發送設定：Gmail SMTP
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 如果需要在開發環境中使用控制台輸出郵件，則可以使用以下行
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') 
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# 緩存配置 - 提升API性能
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5分鐘過期
        'OPTIONS': {
            'MAX_ENTRIES': 1000,  # 最大緩存條目數
        }
    }
}

# 會話緩存配置
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# 靜態文件緩存
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'